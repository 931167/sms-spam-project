import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

# Step 1: Data Preprocessing
train_datagen = ImageDataGenerator(rescale=1./255)
test_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
        'train_data_directory',
        target_size=(150, 150),
        batch_size=20,
        class_mode='binary')  # Binary labels (cats vs. dogs)

test_generator = test_datagen.flow_from_directory(
        'test_data_directory',
        target_size=(150, 150),
        batch_size=20,
        class_mode='binary')

# Step 3: Model Selection
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)),
    MaxPooling2D(2, 2),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),
    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),
    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),
    Flatten(),
    Dense(512, activation='relu'),
    Dense(1, activation='sigmoid')
])

model.compile(loss='binary_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

# Step 4: Model Training
model.fit(
        train_generator,
        steps_per_epoch=100,  # Number of batches per epoch
        epochs=15,
        validation_data=test_generator,
        validation_steps=50)  # Number of batches for validation

# Step 5: Model Evaluation
test_loss, test_acc = model.evaluate(test_generator, steps=50)
print('Test accuracy:', test_acc)
